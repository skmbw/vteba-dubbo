<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:dwr="http://www.directwebremoting.org/schema/spring-dwr"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:spring="http://www.infinispan.org/schemas/spring" 
	xmlns:util="http://www.springframework.org/schema/util" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd http://www.directwebremoting.org/schema/spring-dwr http://www.directwebremoting.org/schema/spring-dwr-3.0.xsd http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd http://www.infinispan.org/schemas/spring http://www.infinispan.org/schemas/infinispan-spring-5.0.xsd 
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"
	default-autowire="byName">
	
	<import resource="application-dubbo.xml"/>
	
	<!-- 默认是基于java interface代理，proxy-target-class="true"表示基于cglib代理。 expose-proxy="true"表示将aop放到AopContext中，供查询 -->
	<aop:aspectj-autoproxy proxy-target-class="true"/>
	
	<!--扫描@Required,@Autowired等注解,自动装配bean-->
	<context:annotation-config/>
	
	<!--自动扫描的基包,包含子包,可以使用切点表达式指定更精确一点。多个用逗号分隔-->
	<context:component-scan base-package="com.vteba">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!--读取jndi数据库连接配置属性文件-->
	<bean id="propUtils" class="com.vteba.utils.common.PropUtils">
		<property name="locations">
			<list>
				<value>classpath:config.properties</value>
			</list>
		</property>
	</bean>
	
	<bean id="configProfile" class="com.dangdang.config.service.zookeeper.ZookeeperConfigProfile">
		<constructor-arg name="connectStr" value="${zookeeper.hosts}" />
		<constructor-arg name="rootNode" value="${rootNode}" />
		<constructor-arg name="version" value="${version}" /><!-- 会作为一个节点 -->
	</bean>
	<bean id="sysConfig" class="com.dangdang.config.service.zookeeper.ZookeeperConfigGroup"
		c:configProfile-ref="configProfile" 
		c:node="system" />
	
	<bean id="tiantianDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 基本属性 url、user、password -->
	    <property name="url" value="${jdbc.url}" />
	    <property name="username" value="${jdbc.username}" />
	    <property name="password" value="${jdbc.password}" />
	      
	    <!-- 配置初始化大小、最小、最大 -->
	    <property name="initialSize" value="1" />
	    <property name="minIdle" value="1" /> 
	    <property name="maxActive" value="20" />
	 
	    <!-- 配置获取连接等待超时的时间 -->
	    <property name="maxWait" value="60000" />
	 
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />
	 
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	    <property name="minEvictableIdleTimeMillis" value="300000" />
	  
	    <property name="validationQuery" value="SELECT 'x'" />
	    <property name="testWhileIdle" value="true" />
	    <property name="testOnBorrow" value="false" />
	    <property name="testOnReturn" value="false" />
	 
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
	    <property name="poolPreparedStatements" value="true" />
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
	 
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
	    <property name="filters" value="stat"/>
	</bean>
	
	<!-- SpringJdbcTemplate -->
	<bean id="tiantianJdbcTemplate" class="com.vteba.tx.jdbc.spring.SpringJdbcTemplate">
		<property name="dataSource" ref="tiantianDataSource"/>
	</bean>
	
    <!-- 事务管理器配置 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="tiantianDataSource" />
	</bean>
    
	<!--切面事务-->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager"> 
		<tx:attributes>
			<tx:method name="get*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="query*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="list*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="find*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="load*" propagation="REQUIRED" read-only="true"/> 
			<tx:method name="unique*" propagation="REQUIRED" read-only="true"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="persist*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED" timeout="4000" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="create*" propagation="REQUIRED"/>
			<tx:method name="execute*" propagation="REQUIRED"/>
			<tx:method name="auto*" propagation="REQUIRED"/>
			<tx:method name="batch*" propagation="REQUIRED"/>
			<tx:method name="check*" propagation="REQUIRED"/>
			<tx:method name="calculate*" propagation="REQUIRED"/>
			<tx:method name="handle*" propagation="REQUIRED"/>
			<tx:method name="decide*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT" timeout="6000" rollback-for="com.vteba.common.exception.ServiceException" no-rollback-for="com.vteba.common.exception.BasicException"/>
		</tx:attributes> 
	</tx:advice>
	<!-- expose-proxy="true" -->
	<aop:config><!--为指定包下所有类的所有方法应用事务切点-->
		<aop:pointcut expression="execution(* com.vteba..*.service.impl.*.*(..))" id="financeTxMethodPointCut"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="financeTxMethodPointCut" order="12"/>
	</aop:config>
	
<!-- 	<tx:annotation-driven transaction-manager="transactionManager" order="11"/> -->

	<!-- 基于Kryo的序列化工具 -->
	<bean id="kryoer" class="com.vteba.utils.serialize.kryo.Kryoer">
		<property name="packagesToScan">
			<set>
				<value>com.vteba.batch.user.model</value>
			</set>
		</property>
		<property name="startupInitial" value="true" />
	</bean>
</beans>